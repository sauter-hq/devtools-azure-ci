# bybranch-checkout : ensure each branch get a separate build worktree for 
#                     stability and to capitalize on incremental compilation time.
# 
# This step exports a $(WORKTREE_DIR) variable to other steps of the same job.
parameters:
  # Clean the worktree by removing it before trying a fresh checkout again
  clean: false

steps:
- checkout: self
  lfs: true
- script: |
    set -o errexit ;
    git config --global credential.helper 'store'
    echo "https://$(GITHUB_SAUTER_USER):$(GITHUB_SAUTER_TOKEN)@github.ch.sauter-bc.com" > ${HOME}/.git-credentials
  displayName: 'setup git credentials'
- script: |
    set -o errexit ;

    # Separate checkout by branch name
    if [ "$(Build.Reason)" = "PullRequest" ]; then
      current_ref=`echo $(System.PullRequest.SourceBranch)`
    else
      current_ref=`echo $(Build.SourceBranch)`
    fi

    current_branch=`echo ${current_ref} | sed 's/refs\/heads\///;'` 
    worktree_branch=b/${current_branch}
    worktree_dir=$(Build.BinariesDirectory)/${current_branch}

    if [ "${{parameters.clean}}" = "true" ]; then
      git worktree remove -f ${worktree_dir} || echo "Worktree removal failed";
      git branch -D ${worktree_branch} || echo "Worktree branch removal failed";
      rm -rf ${worktree_dir}
    fi 

    # Delete outdated worktree
    echo "Removing old worktree, freeing up space."
    df -h $PWD
    time_now=$(date +%s); 
    five_days_ago=$((${time_now} - (5*24*3600) ));
    git worktree list | while read worktree; do
      
      worktree_dir_entry=`echo $worktree | cut -f 1 -d" "`; 
      commit_id=`echo $worktree | cut -f 2 -d" "`; 
      worktree_commit_timestamp=`git show --format="tformat:%ct" -s ${commit_id}`;

      if [ ${worktree_commit_timestamp} -lt ${five_days_ago} ] && [ "${worktree_dir_entry}" != "${worktree_dir}" ] && [[ ${worktree_dir_entry} != $(Build.BinariesDirectory)/release* ]]; then
        echo "${worktree_dir_entry} is older than 5 days, removing to free up space. (timestamp : ${worktree_commit_timestamp})"
        git worktree remove -f ${worktree_dir_entry}
        if [ $? -ne 0 ]; then
          echo "Could not remove ${worktree_dir_entry}"
        fi
        git worktree prune -v
        git gc
        if [ $? -ne 0 ]; then
          echo "Optimizing git repository failed"
        fi
        
        echo "Space available after worktree removal"
        df -h $PWD
      fi
    done 
    echo "Finished checking outdated worktrees"

    # Create or update existing
    if [ -d ${worktree_dir} ]; then
      cd ${worktree_dir}
      git fetch origin
      git checkout $(Build.SourceVersion)
    else
      git worktree add --track -b ${worktree_branch} ${worktree_dir} origin/${current_branch}
      cd ${worktree_dir}
    fi

    echo "##vso[task.setvariable variable=WORKTREE_DIR]${worktree_dir}"
  displayName: 'Freeing up space + Checkout by-branch build worktree'
